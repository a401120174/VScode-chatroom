{"version":3,"sources":["App.module.scss","components/TextInput/TextInput.module.scss","components/Popup/Popup.module.scss","components/UserOnlineBar/UserOnlineBar.module.scss","actions/socketAction.js","components/Content/Content.js","components/TextInput/TextInput.js","components/Popup/Popup.js","components/UserOnlineBar/UserOnlineBar.js","App.js","serviceWorker.js","reducers/toggleReducer.js","saga/saga.js","index.js","components/Content/Content.module.scss"],"names":["module","exports","getFirebase","type","updateMsg","msg","isAll","changeMsg","setId","id","openPopup","popup","updateOnlineUser","count","MsgBox","name","isSelf","time","className","styles","msgBox","rightBox","msgTag","content","Content","userName","ChatType","wrapper","scrollArea","map","idx","key","TextInput","onSubmit","onChangeMsg","value","user","inputEl","useRef","submitEl","box","ref","onChange","textInput","onKeyUp","e","preventDefault","current","click","submit","Popup","isOpen","cover","hide","contentBox","UserOnlineBar","onlineCount","App","props","dispatch","useDispatch","chatReducer","useSelector","state","databaseMsg","useEffect","action","ele","document","querySelector","scrollTop","scrollHeight","length","database","firebase","once","then","snapshot","newMsgArr","i","val","push","limitToLast","on","connectedRef","onlineUser","userRef","snap","onDisconnect","remove","set","numChildren","ramdom","Math","floor","random","openIdSetPop","onChangeId","target","trim","idType","onClick","idSet","title","placeholder","confirm","renderPopup","rightPart","currentMsg","now","Date","hour","getHours","minute","getMinutes","postData","updates","child","update","Boolean","window","location","hostname","match","initstate","toggle","roomss","todo","rooms","mySaga","config","databaseURL","put","console","log","message","takeLatest","sagaMiddleWare","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","toggleReducer","applyMiddleware","ReactDOM","render","getElementById","run","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbe99fff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1yVFo\",\"rightPart\":\"App_rightPart__2JT-q\",\"idType\":\"App_idType__3rBZk\",\"idSet\":\"App_idSet__2wcim\",\"title\":\"App_title__2AbAI\",\"confirm\":\"App_confirm__2v-Rn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"TextInput_box__1_EKg\",\"textInput\":\"TextInput_textInput__3XZeP\",\"submit\":\"TextInput_submit__3KEC5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"Popup_cover__DVy-n\",\"hide\":\"Popup_hide__3fxek\",\"contentBox\":\"Popup_contentBox__CuinG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"UserOnlineBar_box__CuKyd\"};","export const setToggle = toggle => {\r\n  return {\r\n    type: \"TOGGLE\",\r\n    toggle\r\n  };\r\n};\r\n\r\nexport const fectcRooms = () => {\r\n  return {\r\n    type: \"FETCH_ROOM_DATA\"\r\n  };\r\n};\r\n\r\nexport const getFirebase = () => {\r\n  return {\r\n    type: \"GET_FIREBASE\"\r\n  };\r\n};\r\n\r\nexport const updateMsg = (msg, isAll = false) => {\r\n  return {\r\n    type: \"UPDATE_MSG\",\r\n    msg,\r\n    isAll\r\n  };\r\n};\r\n\r\nexport const changeMsg = msg => {\r\n  return {\r\n    type: \"CHANGE_MSG\",\r\n    msg\r\n  };\r\n};\r\n\r\nexport const setId = id => {\r\n  return {\r\n    type: \"SET_ID\",\r\n    id\r\n  };\r\n};\r\n\r\nexport const openPopup = popup => {\r\n  return {\r\n    type: \"OPEN_POPUP\",\r\n    popup\r\n  };\r\n};\r\n\r\nexport const updateOnlineUser = count => {\r\n  return {\r\n    type: \"UPDATE_ONLINE_USER\",\r\n    count\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Content.module.scss\";\r\n\r\nconst MsgBox = ({ name, msg, isSelf, time }) => (\r\n  <div className={`${styles.msgBox} ${isSelf ? styles.isSelf : \"\"}`}>\r\n    <div className={styles.time}>\r\n      <div>{time}</div>\r\n    </div>\r\n    <div className={styles.rightBox}>\r\n      <div className={styles.msgTag}>{`<${isSelf ? `!--` : \"\"}${name}>`}</div>\r\n      <div className={styles.content}>{msg}</div>\r\n      <div className={styles.msgTag}>{`${isSelf ? \"--\" : `</${name}`}>`}</div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst Content = ({ msg, userName, ChatType = \"ramdom\" }) => {\r\n  return (\r\n    <div className={styles.wrapper} id=\"content\">\r\n      <div className={styles.scrollArea}>\r\n        {msg.map((content, idx) => (\r\n          <MsgBox\r\n            name={content.name}\r\n            msg={content.msg}\r\n            time={content.time}\r\n            key={idx}\r\n            isSelf={content.name === userName}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React, { useRef } from \"react\";\r\nimport styles from \"./TextInput.module.scss\";\r\n\r\nconst TextInput = ({ onSubmit, onChangeMsg, value, user }) => {\r\n  const inputEl = useRef(null);\r\n  const submitEl = useRef(null);\r\n\r\n  const pressEnter = e => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      submitEl.current.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.box}>\r\n      <form onSubmit={onSubmit}>\r\n        <span>{user || \"使用者\"} ></span>\r\n        <textarea\r\n          ref={inputEl}\r\n          value={value}\r\n          onChange={onChangeMsg}\r\n          className={styles.textInput}\r\n          onKeyUp={pressEnter}\r\n        />\r\n        <input\r\n          ref={submitEl}\r\n          type=\"submit\"\r\n          value=\"送出\"\r\n          className={styles.submit}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport styles from \"./Popup.module.scss\";\r\n\r\nconst Popup = ({ content, isOpen }) => {\r\n  return (\r\n    <div className={`${styles.cover} ${isOpen ? \"\" : styles.hide}`}>\r\n      <div className={styles.contentBox}>{content}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import React from \"react\";\r\nimport styles from \"./UserOnlineBar.module.scss\";\r\n\r\nconst UserOnlineBar = ({ onlineCount }) => {\r\n  return (\r\n    <div className={styles.box}>\r\n      <div>線上人數:{onlineCount}人</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserOnlineBar;\r\n","import React, { useEffect, useRef } from \"react\";\nimport styles from \"./App.module.scss\";\nimport * as action from \"./actions/socketAction.js\";\nimport * as firebase from \"firebase\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Content from \"./components/Content/Content\";\nimport TextInput from \"./components/TextInput/TextInput\";\nimport Popup from \"./components/Popup/Popup\";\nimport UserOnlineBar from \"./components/UserOnlineBar/UserOnlineBar\";\n\nfunction App(props) {\n  const dispatch = useDispatch();\n  const chatReducer = useSelector(state => state);\n  const databaseMsg = useRef();\n\n  //連上firebase\n  useEffect(() => {\n    dispatch(action.getFirebase());\n  }, []);\n\n  //自動滾到最底\n  useEffect(() => {\n    const ele = document.querySelector(\"#content\");\n    ele.scrollTop = ele.scrollHeight;\n  }, [chatReducer.msg.length]);\n\n  //連上Socket後訂閱Socket事件\n  useEffect(() => {\n    const { database } = chatReducer;\n\n    if (database) {\n      databaseMsg.current = firebase.database().ref(\"msg\");\n\n      //初始化時抓全部的訊息\n      databaseMsg.current.once(\"value\").then(function(snapshot) {\n        const newMsgArr = [];\n        for (var i in snapshot.val()) {\n          newMsgArr.push({\n            name: snapshot.val()[i].name,\n            msg: snapshot.val()[i].msg,\n            time: snapshot.val()[i].time\n          });\n        }\n        dispatch(action.updateMsg(newMsgArr, true));\n      });\n\n      //訊息更新時抓最新的一筆訊息\n      databaseMsg.current.limitToLast(1).on(\"value\", function(snapshot) {\n        for (var i in snapshot.val()) {\n          dispatch(\n            action.updateMsg(\n              {\n                name: snapshot.val()[i].name,\n                msg: snapshot.val()[i].msg,\n                time: snapshot.val()[i].time\n              },\n              false\n            )\n          );\n        }\n      });\n\n      const connectedRef = firebase.database().ref(\".info/connected\");\n      const onlineUser = firebase.database().ref(\"user\");\n      var userRef = onlineUser.push();\n\n      //紀錄上線人數\n      connectedRef.on(\"value\", function(snap) {\n        if (snap.val()) {\n          userRef.onDisconnect().remove();\n          userRef.set(true);\n        }\n      });\n\n      onlineUser.on(\"value\", function(snap) {\n        dispatch(action.updateOnlineUser(snap.numChildren()));\n      });\n    }\n  }, [chatReducer.database]);\n\n  const onSubmit = e => {\n    if (e) e.preventDefault();\n\n    if (chatReducer.currentMsg.trim().length === 0) return;\n    const now = new Date();\n    const hour = now.getHours();\n    let minute =\n      now.getMinutes() < 10 ? `0${now.getMinutes()}` : now.getMinutes();\n\n    const postData = {\n      name: chatReducer.userName,\n      msg: chatReducer.currentMsg,\n      time: `${hour}:${minute}`\n    };\n\n    const newPostKey = firebase\n      .database()\n      .ref()\n      .child(\"posts\")\n      .push().key;\n    const updates = {};\n    updates[newPostKey] = postData;\n\n    //寫入資料\n    databaseMsg.current.update(updates);\n\n    dispatch(action.changeMsg(\"\"));\n  };\n\n  const onChangeMsg = e => {\n    dispatch(action.changeMsg(e.target.value));\n  };\n\n  const setId = () => {\n    const ramdom = Math.floor(Math.random() * 1000);\n    dispatch(action.setId(chatReducer.userName || `無名氏${ramdom}`));\n    dispatch(action.openPopup(\"\"));\n  };\n\n  const openIdSetPop = () => {\n    dispatch(action.openPopup(\"SET_ID\"));\n  };\n\n  const onChangeId = e => {\n    dispatch(action.setId(e.target.value.trim()));\n  };\n\n  const renderPopup = () => {\n    switch (chatReducer.popup) {\n      case \"SET_ID_TYPE\":\n        return (\n          <div className={styles.idType}>\n            <div onClick={setId}>[匿名聊天]</div>\n            <div onClick={openIdSetPop}>[暱稱聊天]</div>\n          </div>\n        );\n      case \"SET_ID\":\n        return (\n          <div className={styles.idSet}>\n            <div className={styles.title}>暱稱聊天</div>\n            <input\n              value={chatReducer.userName}\n              onChange={onChangeId}\n              placeholder=\"輸入暱稱\"\n            />\n            <div onClick={setId} className={styles.confirm}>\n              [確定]\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={styles.App}>\n      <Popup content={renderPopup()} isOpen={!!chatReducer.popup} />\n      <div className={styles.rightPart}>\n        <Content msg={chatReducer.msg} userName={chatReducer.userName} />\n        <UserOnlineBar onlineCount={chatReducer.onlineUser} />\n        <TextInput\n          user={chatReducer.userName}\n          onSubmit={onSubmit}\n          onChangeMsg={onChangeMsg}\n          value={chatReducer.currentMsg}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initstate = {\r\n  toggle: true,\r\n  roomss: [],\r\n  database: null,\r\n  userName: \"\",\r\n  msg: [],\r\n  currentMsg: \"\",\r\n  popup: \"SET_ID_TYPE\",\r\n  onlineUser: 0\r\n};\r\n\r\nconst todo = (state = initstate, action) => {\r\n  switch (action.type) {\r\n    case \"TOGGLE\":\r\n      return { ...state, toggle: !state.toggle };\r\n    case \"ROOM_FETCH_SUCCEEDED\":\r\n      return { ...state, rooms: action.rooms };\r\n    case \"GET_FIREBASE_SCS\":\r\n      return { ...state, database: action.database };\r\n    case \"UPDATE_MSG\":\r\n      if (action.isAll) {\r\n        return { ...state, msg: [...action.msg] };\r\n      } else {\r\n        return { ...state, msg: [...state.msg, action.msg] };\r\n      }\r\n    case \"CHANGE_MSG\":\r\n      return { ...state, currentMsg: action.msg };\r\n    case \"SET_ID\":\r\n      return { ...state, userName: action.id };\r\n    case \"OPEN_POPUP\":\r\n      return { ...state, popup: action.popup };\r\n    case \"UPDATE_ONLINE_USER\":\r\n      return { ...state, onlineUser: action.count };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todo;\r\n","import { put, takeLatest } from \"redux-saga/effects\";\r\nimport * as firebase from \"firebase\";\r\n\r\nfunction* getFirebase(action) {\r\n  try {\r\n    var config = {\r\n      // apiKey: \"apiKey\",\r\n      // authDomain: \"projectId.firebaseapp.com\",\r\n      databaseURL: \"https://mychatroom-b5909.firebaseio.com\"\r\n    };\r\n    firebase.initializeApp(config);\r\n\r\n    yield put({ type: \"GET_FIREBASE_SCS\", database: true });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({ type: \"ROOM_FETCH_FAILED\", message: e.message });\r\n  }\r\n}\r\n\r\nfunction* mySaga() {\r\n  yield takeLatest(\"GET_FIREBASE\", getFirebase);\r\n}\r\n\r\nexport default mySaga;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport toggleReducer from \"./reducers/toggleReducer.js\";\nimport mySaga from \"./saga/saga.js\";\n\nconst sagaMiddleWare = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(\n  toggleReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleWare))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nsagaMiddleWare.run(mySaga);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Content_wrapper__bG5zf\",\"msgBox\":\"Content_msgBox__It5Si\",\"time\":\"Content_time__10qn0\",\"msgTag\":\"Content_msgTag__33qsS\",\"content\":\"Content_content__2rcdB\",\"isSelf\":\"Content_isSelf__ZxC-g\",\"rightBox\":\"Content_rightBox__2qBZt\"};"],"sourceRoot":""}